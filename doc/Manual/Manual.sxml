#!/home/marcel/Languages/Perl6/Projects/Semi-xml/bin/sxml2xml.pl6 --in=db5 --run=pdf

$!Db5b.article [
  $title [ Package &pack; to describe and use semi XML ]
  $!Db5b.info firstname=Marcel surname=Timmerman email=mt1957@gmail.com
              city=Haarlem country=Netherlands
              copy-year='2015, * + 1 ... Inf' copy-holder='Marcel Timmerman' [
    $para [
      The &pack; package comprises a set of Perl 6 modules to convert a
      language coined 'semi xml' or &lang; text into $**emphasis[XML]
      languages such as $*|emphasis[HTML], $**emphasis[SOAP],
      $**emphasis[Docbook] or $*|emphasis[XSL].
    ]

    $para [
      In the package there is also a program called &prog; which uses &pack;
      to transform &lang; text from a given file into XML after which it
      is stored in another file. The generated XML can also be send to any
      program for conversion to other formats or for checking. Examples are
      xsltproc, xmllint, rnv, wkhtmltopdf, xep etcetera.
    ]

    $para [
      Furthermore there are modules designed to generate fragments of html,
      docbook or other
      specific constucts like epub and testing reports. Much of this code need
      some more refinements but it gives the programmer a good insight in the
      strength of this package.
    ]

    $para [
      The latest version of this document is generated on date $!SxmlCore.date.
    ]
  ]

  #----------------------------------------------------------------------------
  $sect1 xml:id=Introduction [
    $title [ Introduction of package &pack; ]
    $para [
      Welcome to the $*|emphasis[&pack;] package. As mentioned in the abstract, the
      modules and programs in this package help to convert &lang; text
      into $*|emphasis[XML].
    ]

    $para [
      An example will speak for itself when Sxml is compared with the generated
      HTML. The generated html shown here is pretty printed but would
      normally be as compact as possible.

      $example [
        $title [ Input &lang; text ]
        $programlisting language=sxml [!=
          $html [
            $head [
              $title [ My First Sxml Document ]
            ]

            $body [
              $h1 [ My First Sxml Document ]
              $p [ Hello world! And it is said on $!SxmlCore.date. ]
            ]
          ]
        !]
      ]

      $example [
        $title [ Generated html text ]
        $programlisting language=html [!=
          <html>
            <head>
              <title>My First Sxml Document</title>
            </head>
            <body>
              <h1>My First Sxml Document</h1>
              <p>Hello world! And it is said on 2016-03-22.</p>
            </body>
          </html>
        !]
      ]
    ]

    $sect2 [
      $title [Advantages using this language]
      $itemizedlist [
        $listitem [
          $para [
            While I find this &lang; more clear to read, this is not the main
            purpose of this language.

            In this language, constructs are introduced to call methods coded in
            modules to generate xml elements. An example of this is shown in the
            example above to insert a date. This date will always be the
            current date when the text is processed.
          ]
        ]

        $listitem [
          $para [
            The language is extensible. Developers can add their own libraries
            to insert xml elements. Humble ideas such as inserting simple html
            elements to alleviate repetative tasks or more eleborate
            projects to insert tables with data loaded from a database.
          ]
        ]
      ]
    ]

    $sect2 [
      $title [Disadvantages]
      $itemizedlist [
        $listitem [
          $para [
            There is an extra level of processing. If the XML text is simple,
            you should not be bothered learning this language. Especially when
            the dynamic constructs aren't used.
          ]

          $para [
            Pointing to the proper spot in the sxml text when an error occurs
            has been proven difficult because the only thing the parser has is
            the element format, attributes and
            matching brackets. When the parser arrives at the end of the
            document it may miss a
            closing bracket or seeing one too many. It is not easy to show
            where
            the bracket is missing or where there is one typed too many.
            However, a few solutions are implemented to help finding the
            error if there is one. This also needs some attention.
          ]
        ]

        $listitem [
          $para [
            This project is only just started. There are many things left on
            the wish list. E.g. I would like to give proper messages when
            mistakes are
            made in the syntax or from within a method in a module.
          ]

          $para [
            Well, I would say it can only improve when modules and methods are
            added and syntax evolve.
          ]
        ]
      ]
    ]

    $sect2 [
      $title [What the manual explains]
      $itemizedlist [
        $listitem [
          $para [
            $emphasis[The package]. An overview of the parts comprising the
            package. This will be about the parsing modules, the included xml
            generating modules, the program and configuration.
          ]
        ]

        $listitem [
          $para [
            $emphasis[The language]. Here the &lang; language is explained,
            the terminology of parts in the document and the used syntax.
          ]
        ]

        $listitem [
          $para [
            $emphasis[Configuration]. The toml configuration file will be
            explained. This section explains how to control the output
            of the result and where modules are to be found. Some options
            are only used by the program
            &prog;. Defaults are also explained.
          ]
        ]

        $listitem [
          $para [
            $emphasis[The programmers view]. Developers can write new modules
            with methods to process tasks not yet captured by this package.
            This section will talk about classes, data and methods
          ]
        ]

        $listitem [
          $para [
            $emphasis[The program]. The program &prog; is used to read
            &lang; from a file and saved or send away. Explanation of
            arguments and prelude options can be found here.
          ]
        ]

        $listitem [
          $para [
            $emphasis[Examples]. Many short examples to show its use of sxml.
          ]
        ]

$!SxmlCore.comment [
        $listitem [
          $emphasis[].
        ]
]
      ]
    ]
  ]

  #----------------------------------------------------------------------------
  $sect1 xml:id=package [
    $title [The package]

    $para [
      There are several parts in this package. First there is the core consisting
      of several modules. These modules handle tasks to load the configuration,
      instantiating the external modules aiding the dynamic parts while parsing,
      the parsing of sxml text, saving results to a file or sending it to
      programs for further processing.
    ]

    $sect2 [
      $title [Configuration]
      $para [
        The configuration is needed to control the several phases of the Translation
        process. For exmple, there is the addition of extra text upfront of the xml
        result text such as xml description, doctype and header messages. Other
        parts control the output to a file or sending the result to another
        program. The format of the configuration file and how the data is processed
        is described in a separate chapter.
      ]
    ]

    $sect2 [
      $title [External modules]
      $para [
        External modules can be written to add functionality to the language. This
        package comes with few modules to insert text, read text from files,
        specific html or docbook tasks, epub generation and test report documents.
        The modules Delivered in this package and how to write such a module is
        explained also in a separate chapter.
      ]
    ]

    $sect2 [
      $title [Parsing and translation]
      $para [
        Parsing is the the process of taking the text and checking it for the &lang;
        language. Together with this process translation of the text takes place.
        How this translation takes place is depending on the way parsing is done.
        Roughly it starts with the toplevel element and arriving at the first
        bracket '[' it may see a mix of text and new elements before the closing
        bracket ']'. The new elements
        content (between the elements brackets) is looked into in turn. So the
        translation of the deepest level must be done first before the second
        deepest etc. up to the toplevel. This knowledge is not important when
        using the simple element form and the predefined methods. However, when
        designing your own methods your method will get the processed xml of
        the content between its brackets.
      ]
    ]

    $sect2 [
      $title [Saving results]
      $para [
        After the translation the result is extended with some extra textlines.
        This result can be saved into a file on disk. The other option to saving
        is sending the result to program for further processing. For example if
        the result happens to be html, this can be converted to pdf using a
        program like wkhtmltopdf.
      ]
    ]
  ]

  #----------------------------------------------------------------------------
  $sect1 xml:id=Language [
    $title [The language]

    $sect2 [
      $title [The document]
      $para [
        A document always starts with an element as you probably know from any XML
        dialect. At the toplevel there may be only one element. The first example
        shows the most simple html document ever.
        $programlisting [!
          $html
        !]
        Something to mention here is that there is no need to add a xml description
        or doctype. These are all controlled by the configuration data.
      ]

      $para [
#TODO RSS in glossary
        A more complex example shows a part of RSS or Really Simple Syndication.
        $programlisting [!
          $rss version=2.0 [
            $channel [
              $title [W3Schools Home Page]
              $link [https://www.w3schools.com]
              $description [Free web building tutorials]
              $item [
                $title [RSS Tutorial]
                $link [https://www.w3schools.com/xml/xml_rss.asp]
                $description [New RSS tutorial on W3Schools]
              ]
            ]
          ]
        !]
#TODO link to w3schools
        As you might have guessed it, the example is taken from w3schools where
        all sorts of xml languages are described.
      ]

      $para [
        The example shows how nesting is done using brackets ('[' and ']') and
        that between brackets there can be a mix of text and other elements.
        What we learn from this example is:
        $itemizedlist [
          $listitem [
            $para [
              $emphasis[Elements]. A simple element is created by using
              a dollar in front of an identifier like $emphasis[\$rss].
            ]
          ]

          $listitem [
            $para [
              $emphasis[Attributes]. Elements may have any number of attributes
              and are written as a key value pair separated by an equal ('='). like
              $emphasis[version=2.0] on the \$rss element. The keyname cannot be
              repeated on the same element, only one attribute of the duplicated
              keynames will survive. The values do not have to be quoted if there
              are no spaces in the value. If there are any, single and double
              quote characters (' and ") can be used.
            ]
          ]
        ]
      ]
    ]

$!SxmlCore.comment [
    $para [
      Below you see a simple example.

      $!Db5f.load-test-example
         path=Book-Examples/BE-001.sxml
         start='$!SxmlCore.comment [Start]'
         stop='$!SxmlCore.comment [Stop]'
         fix-indent=2
         callout-prefix=BE-001.a
         callout-rows=0,2,10
         callout-col=64

      $calloutlist [
        $callout arearefs=BE-001.a01 [
          $para [!
            An element which becomes <html> with a body starting with '['
            enclosing other elements and text.
          !]
        ]

        $callout arearefs=BE-001.a02 [
          $para [
            The title element only contains text and no other elements.
          ]
        ]

        $callout arearefs=BE-001.a03 [
          $para [!
            The html element ends here with the ']' generating </html>.
          !]
        ]
      ]
    ]
]

$!SxmlCore.comment [
    $para [
      The result after running through &prog; is shown below. Importend to
      note that this text is nicely formatted for this example and the output
      would be more like a one-liner.

      $!Db5f.load-test-example
         path=Book-Examples/BE-001.xml
         start='<!--Start-->'
         stop='<!--Stop-->'
         keep-literal=1
         fix-indent=2
         callout-prefix=BE-001.b
         callout-rows=0,2,8
         callout-col=64

      $calloutlist [
        $callout arearefs=BE-001.b01 [
          $para [!
            Result of '$html \[' starts with <html>.
          !]
        ]

        $callout arearefs=BE-001.b02 [
          $para [!
            The title element is generated as <title>... text ... </title>.
          !]
        ]

        $callout arearefs=BE-001.b03 [
          $para [!
            The html element ends here with the generated </html>.
          !]
        ]
      ]
    ]
]

      $sect3 [
        $title [Comment]
        $para [
          Comments are possible on several places and starts with '#'. To be
          more exact, all space before '#', the character '#' and characters
          after it up to the end of line includeing the end of line characters
          are removed.
        ]
      ]

      $sect3 [
        $title [Escaping characters]
        $para [
          When you want to use a character which is used as a delimiter ('[')
          or start of an element ('$') you must escape that character to prevent
          the action that takes place when encountering that character. Writing
          '\' before that character escapes them from that interpretation.
          Examples are '\[' or '\$'.
        ]
      ]

      $sect3 [
        $title [Unicode characters]
        $para [
          All available unicode characters from the utf-8 set may be used in the
          text. These can be inserted directly by cut and paste, using special
          keyboards, entity codes when describing html text such symbol &copy;
          as &amp;copy;, or using numeric codes symbol &#9986; as
          &amp;\#9986; or &amp;\#x2702;.
        ]
      ]

      $sect3 [
        $title [Container types]
        $para [
          There are several ways to contain the text between delimiters
          depending on the contents or even the absence of content.
          Take, for example the html break element <br/>. This element does not
          have content. We could write this as $**emphasis[!$br []!]. But we can
          leave off the brackets to make it shorter like so; $**emphasis[!$br!].
          There are however situations where you must use the brackets when the
          following text is in a argument=value format to prevent them to be
          interpreted as such. E.g. $**emphasis [! $br [] after=break !].
        ]

        $para [
          As described above under $**emphasis[Escaping characters] it is possible
          to insert characters which are otherwise interpreted as something
          special. However, it gets annoying when there are many of them like in
          a piece of javascript or perl code. There is a solution for that luckily,
#TODO tests for all characters like '!'.
          just enclose the text between '[!' and '!\]'. Nothing gets interpreted
          between these delimiters as well as comments are kept in the text.
        ]

        $para [
          In html the text is justified automatically except in sertain sections
          such as within <pre> elements. Sxml does not have any notion of these
          sections and treat those as xml and all excess of space is removed. To
          cope with these sections another set of container delimiters are used.
          These are $**emphasis[! [= ... \] !] and $*|emphasis[! [!= ... \!\] ].
          With these brackets, all indenting and newlines are fixed and protected.
        ]

        $para [
          Multiple content bodies are also possible when there are parts which
          need protection and in other parts, elements are needed. E.g.
          $**emphasis[! $p [The line; ][! my Int $x = 10; \!\][ is an $b[Int] declaration\] !]
        ]
      ]

      $sect3 [
        $title [Element types]
        $para [
          Some examples of elements are already shown at the start
          of this chapter like $**emphasis[! $html !] for instance. It is written
          as a name with a dollar prefixed to it. Normally, spacing around an
          element is minimized but at some places there must be a space before
          or after the element. Examples from html are <a>, <b> and <strong> among
          other inline elements. To get this spacing right one can use
          $**empasis[! $**element !],
          $**emphasis[! $*|element !] or $**emphasis[! $|*element !] to have a
          space on both sides, on the left side or on the right side respectively.
#TODO $|element no spaces.
        ]

        $para [
          Another type is a special one. It is defined as
          $**emphasis[! $!module-key.method-name !] where the module-key is mapped
          to a real module in the configuration file. One key is predefined: SxmlCore
          and is mapped to SxmlLib::SxmlCore. The methods defined in that module
          are explained in a separate chapter. How a module is initialized and
          called for its services is also enaugh stuff to have an extra chapter.
        ]
#TODO $@element templates, @element template inserts.
#TODO
      ]

      $sect3 [
        $title [Attribute types]
        $para [

        ]
      ]

      $sect3 [
        $title [Core element methods]
        $para [

        ]
      ]
    ]

    $sect2 [
      $title [Configuration]

#TODO toml in glossary
      $para [
        The configuration is defined in a separate file which is in the TOML
        format. The data from the configuration is used to e.g. control the
        output of the result. Other usages are referencing libraries to be used
        while parsing the document and to specify te dependncy list. The
        information is specified in a number of tables. Each of these tables are
        used in one specific phase of the whole process. The phases in this
        transformation process and the used tables are;

        $itemizedlist [
          $listitem [
            $para [
              $emphasis[Pre transformation phase]. In this phase dependencies,
              if any, can be checked and solved before transformation starts.
              The $emphasis[X] table is used to find the dependencies.
            ]
          ]

          $listitem [
            $para [
              $emphasis[Transformation phase]. This is the phase where parsing
              and transformation of the document takes place. The tables used
              here are the libraries table $emphasis[L] and modules $emphasis[M]
              table to initialize objects needed in this proces.
            ]
          ]

          $listitem [
            $para [
#TODO http in glossary
# See also http://www.iana.org/assignments/message-headers/message-headers.xml#perm-headers%7CMessage
              $emphasis[Post transformation phase]. When the document is
              translated, the result can be prefixed with extra data. The table
              used for this is the prefix table $emphasis[P]. When the result is
              generated on a server and needs to be returned, extra data must be
              prefixed. These are the so called message headers of which that of
              the http protocol are the most commonly used headers. The table
              $emphasis[H] is used for this.
            ]
          ]

          $listitem [
            $para [
              $emphasis[Storage phase]. The next phase is storing the data in a
              file. For this the staorage table $emphasis[S] is used where the
              files basename, path and extension is found.
            ]
          ]

          $listitem [
            $para [
              $emphasis[ ].
            ]
          ]
        ]
      ]

      $para [
        The prelude consists of a series of key-value pairs. The keys are
        defined as a series of catagories and subcatagories. The value can be
        anything. The key value pair is separated by a colon ':' and the pair
        ends in a ';'. The prelude part is also optional. In that case defaults
        will be applied.
      ]

      $para [
        Below you see an example of two options to let the xml prelude be
        written as well as a doctype at the start of the result.
        $programlisting [!=
        !]
      ]

$!SxmlCore.comment [
        $sect4 [
          $title [  ]
          $para [
          ]
        ]
]

      $sect3 [
        $title [ Options used by the library &pack; ]

        $sect4 [
          $title [ module ]
          $para [
          ]
        ]

        $sect4 [
          $title [ option/doctype/definition ]
          $para [
            $programlisting [!=
option/doctype/definition: \[
  <!ENTITY company "Acme Mc Carpenter, Inc">
  <!ENTITY program "sxml2xml">
  <!ENTITY library "Semi-xml">
  <!ENTITY nbsp " ">
\]
            !]
          ]
        ]

        $sect4 [
          $title [ option/doctype/show ]
          $para [
          ]
        ]

        $sect4 [
          $title [ option/http-header ]
          $para [
          ]
        ]

        $sect4 [
          $title [ option/xml-prelude/encoding ]
          $para [
          ]
        ]

        $sect4 [
          $title [ option/xml-prelude/show ]
          $para [
          ]
        ]

        $sect4 [
          $title [ option/xml-prelude/version ]
          $para [
          ]
        ]

        $sect4 [
          $title [ output/fileext ]
          $para [
          ]
        ]

        $sect4 [
          $title [ output/filename ]
          $para [
          ]
        ]

        $sect4 [
          $title [ output/filepath ]
          $para [
          ]
        ]

        $sect4 [
          $title [ output/program ]
          $para [
            $programlisting [!=
output/program/pdf:
  | xsltproc --encoding utf-8 --xinclude stylesheet.xsl -
  | xep -fo - -pdf sxml2xml.pdf
  ;
            !]
          ]
        ]
      ]
    ]
  ]

  $sect1 xml:id=Prog-view [
    $title [The programmers view]
    $para [
    ]

    $sect2 [
      $title [Classes data and methods]
      $para [

      ]
    ]

    $sect2 [
      $title [Substitution data]
      $para [

      ]
    ]

    $sect2 [
      $title [Methods]
      $para [

      ]
    ]
  ]

  $sect1 xml:id=Use-prog [
    $title [Using program &prog;]
    $para [

    ]

    $sect2 [
      $title [Program arguments]
      $para [
        $synopsis [!=
sxml2xml [--run=<run-selector>] <sxml-file>
        !]
      ]
    ]

    $sect2 [
      $title [Prelude options]
      $sect3 [
        $title [dependencies/files]
        $para [
          The value of this option is a list of paths to semi-xml
          documents which must be processed after the current one.
        ]
      ]
    ]

    $sect2 [
      $title [Unix she-bang usage]
      $para [
      ]
    ]
  ]

$!SxmlCore.comment [
    $sect2 [
      $title []
      $para [
      ]
    ]
]

  #----------------------------------------------------------------------------
  $sect1 xml:id=syntax [
    $title [Syntax]
    $para [
      $programlisting [!=
<sxml-syntax> ::= <prelude-section>? <document>;

<prelude-section> ::= '---' <new-line> <key-value-pairs>* '---' <new-line>;
<key-value-pairs> ::= <key-name> ':' <value> ';';
<key-name> ::= <key-part> ('/' <key-part>)*;
<key-part> ::= <letter> (<letter>|<number>)*;

<document> ::= <prefix> <element> ( <attribute> '=' <attr-value> )*
               '[' <body-start-control> <body> <body-end-control>
               ']';

<prefix> ::= '$.' | '$!' | '$*<' | '$*>' | '$*' | '$';

<element> ::= <identifier>;
<attribute> ::= <identifier>;
<attr-value> ::= '"' <ws-text> '"' | "'" <ws-text> "'"
                 | <non-ws-text>;

<identifier> ::=  <letter> (<letter>|<number>)*
                  ( '-' (<letter> (<letter>|<number>)+) )*;

<body-start-control> ::= '!=' | '!' | '=';
<body-end-control> ::= '!';
      !]
    ]
  ]

  #----------------------------------------------------------------------------
  $sect1 xml:id=Examples [
    $title [Examples]
    $para [

    # comment on its own in 1st body
    ]
  ]

  $index
]
