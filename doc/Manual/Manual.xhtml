<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Using Semi-xml</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.78.1" /><meta name="description" content="The Semi-xml package comprises of a set of Perl 6 modules to convert a language coined 'semi xml' or sxml text into XML languages such as HTML, SOAP or XSL. In the package there is also a program called sxml2xml which uses this library to transform sxml text from a file into XML after which it is stored in another file. The generated XML can also be send to any program for conversion to other formats or for checking. Examples are xsltproc, xmllint, rnv, wkhtmltopdf, xep etcetera. The latest version of this document is generated on date 2017-02-15" /></head><body><div xml:lang="en" class="article" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="idm140630351411856"></a>Using Semi-xml</h2></div><div><div class="author"><h3 class="author"><span class="firstname">Marcel</span> <span class="surname">Timmerman</span></h3><code class="email">&lt;<a class="email" href="mailto:mt1957@gmail.com">mt1957@gmail.com</a>&gt;</code></div></div><div><p class="copyright">Copyright © 2015, * + 1 ... Inf Marcel Timmerman</p></div><div><div class="abstract"><p class="title"><strong>Abstract</strong></p><p>The Semi-xml package comprises of a set of Perl 6 modules to convert a language coined 'semi xml' or sxml text into <span class="emphasis"><em>XML</em></span> languages such as <span class="emphasis"><em>HTML</em></span>, <span class="emphasis"><em>SOAP</em></span> or <span class="emphasis"><em>XSL</em></span>.
</p><p>In the package there is also a program called sxml2xml which uses this library to transform sxml text from a file into XML after which it is stored in another file. The generated XML can also be send to any program for conversion to other formats or for checking. Examples are xsltproc, xmllint, rnv, wkhtmltopdf, xep etcetera.
</p><p>The latest version of this document is generated on date
 2017-02-15</p></div></div></div><hr /></div><div class="toc"><p><strong>Table of Contents</strong></p><dl class="toc"><dt><span class="sect1"><a href="#Introduction">1. Introduction of module Semi-xml</a></span></dt><dd><dl><dt><span class="sect2"><a href="#idm140630325509824">1.1. Advantages using this language</a></span></dt><dt><span class="sect2"><a href="#idm140630325507296">1.2. Disadvantages</a></span></dt><dt><span class="sect2"><a href="#idm140630325503696">1.3. Information given in this article</a></span></dt></dl></dd><dt><span class="sect1"><a href="#Language">2. The language</a></span></dt><dd><dl><dt><span class="sect2"><a href="#idm140630325432224">2.1. Document</a></span></dt><dt><span class="sect2"><a href="#idm140630325425648">2.2. Prelude</a></span></dt></dl></dd><dt><span class="sect1"><a href="#Prog-view">3. The programmers view</a></span></dt><dd><dl><dt><span class="sect2"><a href="#idm140630325415888">3.1. Classes data and methods</a></span></dt><dt><span class="sect2"><a href="#idm140630325415376">3.2. Substitution data</a></span></dt><dt><span class="sect2"><a href="#idm140630325414864">3.3. Methods</a></span></dt></dl></dd><dt><span class="sect1"><a href="#Use-prog">4. Using program sxml2xml</a></span></dt><dd><dl><dt><span class="sect2"><a href="#idm140630325413600">4.1. Program arguments</a></span></dt><dt><span class="sect2"><a href="#idm140630325412720">4.2. Prelude options</a></span></dt><dt><span class="sect2"><a href="#idm140630325411568">4.3. Unix she-bang usage</a></span></dt></dl></dd><dt><span class="sect1"><a href="#syntax">5. Syntax</a></span></dt><dt><span class="sect1"><a href="#Examples">6. Examples</a></span></dt><dt><span class="index"><a href="#idm140630325408032">Index</a></span></dt></dl></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Introduction"></a>1. Introduction of module Semi-xml</h2></div></div></div><p>Welcome to <span class="emphasis"><em>Semi-xml</em></span>. As mentioned in the abstract, the modules in the library helps the programmer to convert sxml text into <span class="emphasis"><em>XML</em></span>.
</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325509824"></a>1.1. Advantages using this language</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem">It is more clear to read the text which is where you want to focus on and therefor more maintainable than XML is. One of those thing I find annoying is writing the end tag. This is solved by using '[' and ']' to enclose a deeper level of nesting.</li><li class="listitem">Some language constructs will help inserting predefined text. An example of this might be to insert a lot of attributes of some element and hide it under a name.
</li><li class="listitem">There are also constructs which are able to call code in modules to simplify things. An example is the use of one of the core methods to insert a date or time-stamp in the text. As an example above at the end of the abstract a date is generated. This date will always be the current date when the text is processed again. This specific part adds dynamism to your text.
</li><li class="listitem">The language is extensible. Developers can add their own libraries to load for example data from a database and inserting it in the text as a HTML table.
</li></ul></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325507296"></a>1.2. Disadvantages</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>There is an extra level of processing. If the XML text is simple one should not be bothered learning this language. Especially when the dynamic constructs aren't used.
</p><p>Pointing to the proper spot in the sxml text when an error occurs has been proven difficult because the only thing the parser has is matching brackets. When the parser arrives at the end it may miss a closing bracket or seeing one too many. It is not easy to show where the bracket is missing or where there is one typed too many. However, there are a few solutions implemented to help finding the error if there is one.
</p></li><li class="listitem">This project is only just started. There are many things left on the wish list. E.g. I would like to give proper messages when mistakes are made in the syntax.
</li></ul></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325503696"></a>1.3. Information given in this article</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><span class="emphasis"><em>The language</em></span>. Here the basic layout will be explained, the terminology and meaning of the syntax. The start will be gentle showing simple cases first.. </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p><span class="emphasis"><em>The document section</em></span>. The document is where text is written for the specific documents together with the elements to format the text. Some of the special elements will need the prelude section explained in the next section.
</p></li><li class="listitem"><p><span class="emphasis"><em>The prelude section</em></span>. The prelude section will be explained. In this section you can control the output of the result. Some options are only used by the program sxml2xml. Defaults are also explained.
</p></li></ul></div></li><li class="listitem"><p><span class="emphasis"><em>The programmers view</em></span>. Developers can write new modules with methods to process tasks not yet captured by this package. </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p><span class="emphasis"><em>Classes data and methods</em></span>. An explanation of the layout of a users module and an explanation of how to specify the options in the prelude
</p></li><li class="listitem"><p><span class="emphasis"><em>Substitution data</em></span>. Declarations of data which can be used to substitute into the text.
</p></li><li class="listitem"><p><span class="emphasis"><em>Methods</em></span>. Methods which help inserting new text and entities into the text.
</p></li></ul></div></li><li class="listitem"><p><span class="emphasis"><em>Using the program</em></span>. The program is used to read sxml from a file and saved or send away. Explanation of arguments and prelude options can be found here.
</p></li><li class="listitem"><p><span class="emphasis"><em>Examples</em></span>. Many short examples to show its use of sxml.
</p></li></ul></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Language"></a>2. The language</h2></div></div></div><p>The language exists of two parts, a prelude and the document. The prelude is used to set options to introduce external modules or to define ways to output the resulting xml. The prelude is also optional.
</p><p>The prelude starts with 3 dashes and ends with it. The prelude itself consists of a series of key-value pairs to control the way output is to be delivered. The prelude part is also optional. In that case defaults will be applied.
</p><pre class="programlisting">
---
... prelude area ...
---
... document area ...</pre><p>The document follows the prelude and is the thing you want to publish. It has a similar look as any xml typed language but is easier to read.
</p><p>Below you see a simple example where the prelude is not used. When the prelude is missing the default action is to write the result into a second file. The name of the file is kept the same but with an extension of '.xml'. </p><pre class="programlisting">empty file or not found                                         <a id="BE-001.a01"></a><span><img src="/home/marcel/Graphics/IconsArchive/Icons/Scalable/Docbook/Svg/1.svg" alt="1" border="0" /></span>
</pre><div class="calloutlist"><table border="0" summary="Callout list"><tr><td width="5%" valign="top" align="left"><p><a href="#BE-001.a01"><span><img src="/home/marcel/Graphics/IconsArchive/Icons/Scalable/Docbook/Svg/1.svg" alt="1" border="0" /></span></a> </p></td><td valign="top" align="left"><p>An element which becomes &lt;html&gt; with a body starting with '[' enclosing other elements and text.</p></td></tr><tr><td width="5%" valign="top" align="left"><p>???</p></td><td valign="top" align="left"><p>The title element only contains text and no other elements.
</p></td></tr><tr><td width="5%" valign="top" align="left"><p>???</p></td><td valign="top" align="left"><p>The html element ends here with the ']' generating &lt;/html&gt;.</p></td></tr></table></div><p>The result after running through sxml2xml is shown below. Importend to note that this text is nicely formatted for this example and the output would be more like a one-liner.
</p><pre class="programlisting">empty file or not found                                         <a id="BE-001.b01"></a><span><img src="/home/marcel/Graphics/IconsArchive/Icons/Scalable/Docbook/Svg/1.svg" alt="1" border="0" /></span>
</pre><div class="calloutlist"><table border="0" summary="Callout list"><tr><td width="5%" valign="top" align="left"><p><a href="#BE-001.b01"><span><img src="/home/marcel/Graphics/IconsArchive/Icons/Scalable/Docbook/Svg/1.svg" alt="1" border="0" /></span></a> </p></td><td valign="top" align="left"><p>Result of '$html [' starts with &lt;html&gt;.</p></td></tr><tr><td width="5%" valign="top" align="left"><p>???</p></td><td valign="top" align="left"><p>The title element is generated as &lt;title&gt;... text ... &lt;/title&gt;.</p></td></tr><tr><td width="5%" valign="top" align="left"><p>???</p></td><td valign="top" align="left"><p>The html element ends here with the generated &lt;/html&gt;.</p></td></tr></table></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325432224"></a>2.1. Document</h3></div></div></div><p>The document is where the text comes in the same way as in a normal XML document. The elements most of us are aware of all start with a dollar '$'. Above in an example we have seen the expression <span class="emphasis"><em>$|title [ Hello World ]</em></span>. The body of the element is enclosed between square brackets '[' and ']'. Within these brackets you can write new elements intermittent with normal text. The methods in the library will not check if a particular element may be used on such place, you will need to look into the specifics of the XML language at hand.. So the syntax of writing an element structure is quite simple.
</p><p>However, sxml is capable of doing more than just entering XML elements in an alternative way. E.g. an element might need attributes. Below you see in a not too strict <span class="emphasis"><em>BNF</em></span> variant a part of the syntax;
</p><pre class="programlisting">
&lt;document&gt; ::= &lt;prefix&gt; &lt;element&gt; ( &lt;attribute&gt; '=' &lt;attr-value&gt; )*
               '[' &lt;body-start-control&gt; &lt;body&gt; &lt;body-end-control&gt;
               ']';

&lt;prefix&gt; ::= '$.' | '$!' | '$*&lt;' | '$*&gt;' | '$*' | '$';

&lt;element&gt; ::= &lt;identifier&gt;;
&lt;attribute&gt; ::= &lt;identifier&gt;;
&lt;attr-value&gt; ::= '"' &lt;ws-text&gt; '"' | "'" &lt;ws-text&gt; "'"
                 | &lt;non-ws-text&gt;;

&lt;identifier&gt; ::=  &lt;letter&gt; (&lt;letter&gt;|&lt;number&gt;)*
                  ( '-' (&lt;letter&gt; (&lt;letter&gt;|&lt;number&gt;)+) )*;

&lt;body-start-control&gt; ::= '!=' | '!' | '=';
&lt;body-end-control&gt; ::= '!';</pre><p>White space is forbidden between the &lt;prefix&gt; and &lt;element&gt; as well as between the &lt;attribute&gt;, '=' and &lt;attr-value&gt;. Furthermore between the brackets and &lt;body-start-control&gt; and &lt;body-end-control&gt; are also no spaces. In the BNF above is not appearant that the '[!' combination must be used with the '!] combination.
</p><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm140630325427696"></a>2.1.1. Element types</h4></div></div></div><p></p></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm140630325427184"></a>2.1.2. Escaping characters</h4></div></div></div><p></p></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm140630325426672"></a>2.1.3. Unicode characters</h4></div></div></div><p></p></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm140630325426160"></a>2.1.4. Core elements</h4></div></div></div><p></p></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325425648"></a>2.2. Prelude</h3></div></div></div><p>The prelude is used to e.g. control to output of the result. Other usages are referencing libraries to be used in the document.
</p><p>The prelude consists of a series of key-value pairs. The keys are defined as a series of catagories and subcatagories. The value can be anything. The key value pair is separated by a colon ':' and the pair ends in a ';'. The prelude part is also optional. In that case defaults will be applied.
</p><p>Below you see an example of two options to let the xml prelude be written as well as a doctype at the start of the result.
</p><pre class="programlisting">
---
option/xml-prelude/show:      1;
option/doctype/show:          1;
---</pre><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm140630325423520"></a>2.2.1. Options used by the library Semi-xml</h4></div></div></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325510592"></a>module</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325422624"></a>option/doctype/definition</h5></div></div></div><pre class="programlisting">
option/doctype/definition: [
  &lt;!ENTITY company "Acme Mc Carpenter, Inc"&gt;
  &lt;!ENTITY program "sxml2xml"&gt;
  &lt;!ENTITY library "Semi-xml"&gt;
  &lt;!ENTITY nbsp " "&gt;
]</pre></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325421616"></a>option/doctype/show</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325421104"></a>option/http-header</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325420592"></a>option/xml-prelude/encoding</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325420032"></a>option/xml-prelude/show</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325419520"></a>option/xml-prelude/version</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325418960"></a>output/fileext</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325418448"></a>output/filename</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325417936"></a>output/filepath</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm140630325417424"></a>output/program</h5></div></div></div><pre class="programlisting">
output/program/pdf:
  | xsltproc --encoding utf-8 --xinclude stylesheet.xsl -
  | xep -fo - -pdf sxml2xml.pdf
  ;</pre></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Prog-view"></a>3. The programmers view</h2></div></div></div><p></p><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325415888"></a>3.1. Classes data and methods</h3></div></div></div><p></p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325415376"></a>3.2. Substitution data</h3></div></div></div><p></p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325414864"></a>3.3. Methods</h3></div></div></div><p></p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Use-prog"></a>4. Using program sxml2xml</h2></div></div></div><p></p><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325413600"></a>4.1. Program arguments</h3></div></div></div><pre class="synopsis">
sxml2xml [--run=&lt;run-selector&gt;] &lt;sxml-file&gt;</pre></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325412720"></a>4.2. Prelude options</h3></div></div></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm140630325412336"></a>4.2.1. dependencies/files</h4></div></div></div><p>The value of this option is a list of paths to semi-xml documents which must be processed after the current one.
</p></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm140630325411568"></a>4.3. Unix she-bang usage</h3></div></div></div><p></p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="syntax"></a>5. Syntax</h2></div></div></div><pre class="programlisting">
&lt;sxml-syntax&gt; ::= &lt;prelude-section&gt;? &lt;document&gt;;

&lt;prelude-section&gt; ::= '---' &lt;new-line&gt; &lt;key-value-pairs&gt;* '---' &lt;new-line&gt;;
&lt;key-value-pairs&gt; ::= &lt;key-name&gt; ':' &lt;value&gt; ';';
&lt;key-name&gt; ::= &lt;key-part&gt; ('/' &lt;key-part&gt;)*;
&lt;key-part&gt; ::= &lt;letter&gt; (&lt;letter&gt;|&lt;number&gt;)*;

&lt;document&gt; ::= &lt;prefix&gt; &lt;element&gt; ( &lt;attribute&gt; '=' &lt;attr-value&gt; )*
               '[' &lt;body-start-control&gt; &lt;body&gt; &lt;body-end-control&gt;
               ']';

&lt;prefix&gt; ::= '$.' | '$!' | '$*&lt;' | '$*&gt;' | '$*' | '$';

&lt;element&gt; ::= &lt;identifier&gt;;
&lt;attribute&gt; ::= &lt;identifier&gt;;
&lt;attr-value&gt; ::= '"' &lt;ws-text&gt; '"' | "'" &lt;ws-text&gt; "'"
                 | &lt;non-ws-text&gt;;

&lt;identifier&gt; ::=  &lt;letter&gt; (&lt;letter&gt;|&lt;number&gt;)*
                  ( '-' (&lt;letter&gt; (&lt;letter&gt;|&lt;number&gt;)+) )*;

&lt;body-start-control&gt; ::= '!=' | '!' | '=';
&lt;body-end-control&gt; ::= '!';</pre></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Examples"></a>6. Examples</h2></div></div></div><p></p></div><div class="index"><div class="titlepage"><div><div><h2 class="title"><a id="idm140630325408032"></a>Index</h2></div></div></div><div class="index"></div></div></div></body></html>