<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Package SemiXML to describe and use semi XML</title><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot" /><meta name="description" content="The SemiXML package comprises of a set of Perl 6 modules to convert a language coined 'semi xml' or sxml text into XML languages such as HTML, SOAP, Docbook or XSL. In the package there is also a program called sxml2xml which uses SemiXML to transform sxml text from a given file into XML after which it is stored in another file. The generated XML can also be send to any program for conversion to other formats or for checking. Examples are xsltproc, xmllint, rnv, wkhtmltopdf, xep etcetera. Furthermore there are modules designed to generate fragments of html, docbook or other specific constructs like Epub and testing reports. Much of this code need some more refinements but it shows the strength of this package. The latest version of this document is generated on date2018-03-08." /></head><body><div xml:lang="en" class="article" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="idm139922210295744"></a>Package SemiXML to describe and use semi XML</h2></div><div><div class="author"><h3 class="author"><span class="firstname">Marcel</span> <span class="surname">Timmerman</span></h3><code class="email">&lt;<a class="email" href="mailto:mt1957@gmail.com">mt1957@gmail.com</a>&gt;</code></div></div><div><p class="copyright">Copyright © 2015, * + 1 ... Inf Marcel Timmerman</p></div><div><div class="abstract"><p class="title"><strong>Abstract</strong></p><p>The SemiXML package comprises of a set of Perl 6 modules to convert a language coined 'semi xml' or sxml text into<span class="emphasis"><em> XML </em></span>languages such as<span class="emphasis"><em> HTML</em></span>,<span class="emphasis"><em> SOAP</em></span>,<span class="emphasis"><em> Docbook </em></span>or<span class="emphasis"><em> XSL</em></span>.</p><p>In the package there is also a program called<span class="emphasis"><em> sxml2xml </em></span>which uses SemiXML to transform sxml text from a given file into XML after which it is stored in another file. The generated XML can also be send to any program for conversion to other formats or for checking. Examples are<span class="emphasis"><em> xsltproc</em></span>,<span class="emphasis"><em> xmllint</em></span>,<span class="emphasis"><em> rnv</em></span>,<span class="emphasis"><em> wkhtmltopdf</em></span>,<span class="emphasis"><em> xep </em></span>etcetera.</p><p>Furthermore there are modules designed to generate fragments of html, docbook or other specific constructs like Epub and testing reports. Much of this code need some more refinements but it shows the strength of this package.</p><p>The latest version of this document is generated on date2018-03-08.</p></div></div></div><hr /></div><div class="toc"><p><strong>Table of Contents</strong></p><dl class="toc"><dt><span class="sect1"><a href="#Introduction">1. Introduction of package SemiXML</a></span></dt><dd><dl><dt><span class="sect2"><a href="#idm139922183597280">1.1. Advantages using this language</a></span></dt><dt><span class="sect2"><a href="#idm139922183676640">1.2. Disadvantages</a></span></dt><dt><span class="sect2"><a href="#idm139922183673936">1.3. What the manual explains</a></span></dt></dl></dd><dt><span class="sect1"><a href="#package">2. The package</a></span></dt><dd><dl><dt><span class="sect2"><a href="#idm139922183578128">2.1. Configuration</a></span></dt><dt><span class="sect2"><a href="#idm139922183577072">2.2. External modules</a></span></dt><dt><span class="sect2"><a href="#idm139922183576080">2.3. Parsing and translation</a></span></dt><dt><span class="sect2"><a href="#idm139922183671120">2.4. Saving results</a></span></dt></dl></dd><dt><span class="sect1"><a href="#Language">3. The language</a></span></dt><dd><dl><dt><span class="sect2"><a href="#idm139922183572384">3.1. The document</a></span></dt><dt><span class="sect2"><a href="#idm139922183553744">3.2. Configuration</a></span></dt></dl></dd><dt><span class="sect1"><a href="#Prog-view">4. The programmers view</a></span></dt><dd><dl><dt><span class="sect2"><a href="#idm139922183537216">4.1. Classes data and methods</a></span></dt><dt><span class="sect2"><a href="#idm139922183536656">4.2. Substitution data</a></span></dt><dt><span class="sect2"><a href="#idm139922183536144">4.3. Methods</a></span></dt></dl></dd><dt><span class="sect1"><a href="#Use-prog">5. Using program sxml2xml</a></span></dt><dd><dl><dt><span class="sect2"><a href="#idm139922183534928">5.1. Program arguments</a></span></dt><dt><span class="sect2"><a href="#idm139922183534048">5.2. Prelude options</a></span></dt><dt><span class="sect2"><a href="#idm139922183532896">5.3. Unix she-bang usage</a></span></dt></dl></dd><dt><span class="sect1"><a href="#syntax">6. Syntax</a></span></dt><dt><span class="sect1"><a href="#Examples">7. Examples</a></span></dt><dt><span class="index"><a href="#idm139922183529696">Index</a></span></dt></dl></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Introduction"></a>1. Introduction of package SemiXML</h2></div></div></div><p>Welcome to the<span class="emphasis"><em> SemiXML </em></span>package. As mentioned in the abstract, the modules and programs in this package help to convert sxml text into<span class="emphasis"><em> XML </em></span>or any dialect thereof.</p><p>An example will speak for itself when Sxml is compared with the generated HTML. The generated html shown here is pretty printed but would normally be as compact as possible.</p><div class="example"><a id="idm139922183599392"></a><p class="title"><strong>Example 1. Input sxml text</strong></p><div class="example-contents"><pre class="programlisting">
$html [
  $head [
    $title [ My First Sxml Document ]
  ]

  $body [
    $h1 [ My First Sxml Document ]
    $p [ Hello world! And it is said on $!SxmlCore.date. ]
  ]
]
        </pre></div></div><p><br class="example-break" /></p><div class="example"><a id="idm139922183598432"></a><p class="title"><strong>Example 2. Generated html text</strong></p><div class="example-contents"><pre class="programlisting">
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;My First Sxml Document&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;My First Sxml Document&lt;/h1&gt;
    &lt;p&gt;Hello world! And it is said on 2016-03-22.&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
        </pre></div></div><p><br class="example-break" /></p><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183597280"></a>1.1. Advantages using this language</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>While I find this sxml more clear to read, this is not the main purpose of this language. In this language, constructs are introduced to call methods coded in modules to generate xml elements. An example of this is shown in the example above to insert a date. This date will always be the current date when the text is processed.</p></li><li class="listitem"><p>The language is extensible. Developers can add their own libraries to insert xml elements. Humble ideas such as inserting simple html elements to alleviate repetative tasks or more eleborate projects to insert tables with data loaded from a database.</p></li></ul></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183676640"></a>1.2. Disadvantages</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>There is an extra level of processing. If the XML text is simple, you should not be bothered learning this language. Especially when the dynamic constructs aren't used.</p><p>Pointing to the proper spot in the sxml text when an error occurs has been proven difficult because the only thing the parser has is the element format, attributes and matching brackets. When the parser arrives at the end of the document it may miss a closing bracket or seeing one too many. It is not easy to show where the bracket is missing or where there is one typed too many. However, a few solutions are implemented to help finding the error if there is one. This also needs some attention.</p></li><li class="listitem"><p>This project is only just started. There are many things left on the wish list. E.g. I would like to give proper messages when mistakes are made in the syntax or from within a method in a module.</p><p>Well, I would say it can only improve when modules and methods are added and syntax evolve.</p></li></ul></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183673936"></a>1.3. What the manual explains</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><span class="emphasis"><em> The package</em></span>. An overview of the parts comprising the package. This will be about the parsing modules, the included xml generating modules, the program and configuration.</p></li><li class="listitem"><p><span class="emphasis"><em> The language</em></span>. Here the sxml language is explained, the terminology of parts in the document and the used syntax.</p></li><li class="listitem"><p><span class="emphasis"><em> Configuration</em></span>. The toml configuration file will be explained. This section explains how to control the output of the result and where modules are to be found. sxml2xml. Defaults are also explained.</p></li><li class="listitem"><p><span class="emphasis"><em> The programmers view</em></span>. Developers can write new modules with methods to process tasks not yet captured by this package. This section will talk about classes, data and methods</p></li><li class="listitem"><p><span class="emphasis"><em> The program</em></span>. The program sxml2xml is used to read sxml from a file and saved or send away. Explanation of arguments and prelude options can be found here.</p></li><li class="listitem"><p><span class="emphasis"><em> Examples</em></span>. Many short examples to show its use of sxml.</p></li></ul></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="package"></a>2. The package</h2></div></div></div><p>There are several parts in this package. First there is the core consisting of several modules. These modules handle tasks to load the configuration, instantiating the external modules aiding the dynamic parts while parsing, the parsing of sxml text, saving results to a file or sending it to programs for further processing.</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183578128"></a>2.1. Configuration</h3></div></div></div><p>The configuration is needed to control the several phases of the Translation process. For exmple, there is the addition of extra text upfront of the xml result text such as xml description, doctype and header messages. Other parts control the output to a file or sending the result to another program. The format of the configuration file and how the data is processed is described in a separate chapter.</p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183577072"></a>2.2. External modules</h3></div></div></div><p>External modules can be written to add functionality to the language. This package comes with few modules to insert text, read text from files, specific HTML or Docbook tasks, Epub generation and test report documents. The modules Delivered in this package and how to write such a module is explained also in a separate chapter.</p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183576080"></a>2.3. Parsing and translation</h3></div></div></div><p>Parsing is the the process of taking the text and checking it for the sxml language. Together with this process translation of the text takes place. How this translation takes place is depending on the way parsing is done. Roughly it starts with the top level element and arriving at the first bracket '[' it may see a mix of text and new elements before the closing bracket '\]'. The new elements content (between the elements brackets) is looked into in turn. So the translation of the deepest level must be done first before the second deepest etc. up to the top level. This knowledge is not important when using the simple element form and the predefined methods. However, when designing your own methods your method will get the processed XML of the content between its brackets.</p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183671120"></a>2.4. Saving results</h3></div></div></div><p>After the translation the result is extended with some extra textlines. This result can be saved into a file on disk. The other option to saving is sending the result to program for further processing. For example if the result happens to be HTML, this can be converted to PDF using a program like wkhtmltopdf.</p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Language"></a>3. The language</h2></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183572384"></a>3.1. The document</h3></div></div></div><p>A document always starts with an element as you probably know from any XML dialect. At the top level there may be only one element. The first example shows the most simple HTML document ever.</p><pre class="programlisting">
$html
        </pre><p>Something to mention here is that there is no need to add a XML description or Doctype. These are all controlled by the configuration data.</p><p>A more complex example shows a part of RSS or Really Simple Syndication.</p><pre class="programlisting">
$rss version=2.0 [
  $channel [
    $title [W3Schools Home Page]
    $link [https://www.w3schools.com]
    $description [Free web building tutorials]
    $item [
      $title [RSS Tutorial]
      $link [https://www.w3schools.com/xml/xml_rss.asp]
      $description [New RSS tutorial on W3Schools]
    ]
  ]
]
        </pre><p>As you might have guessed it, the example is taken from w3schools where all sorts of XML languages are described.</p><p>The example shows how nesting is done using brackets ('[' and '\]') and that between brackets there can be a mix of text and other elements. What we learn from this example is:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><span class="emphasis"><em> Elements</em></span>. A simple element is created by using a dollar in front of an identifier like<span class="emphasis"><em> $rss</em></span>.</p></li><li class="listitem"><p><span class="emphasis"><em> Attributes</em></span>. Elements may have any number of attributes and are written as a key value pair separated by an equal ('='). like<span class="emphasis"><em> version=2.0 </em></span>on the $rss element. The key name cannot be repeated on the same element, only one attribute of the duplicated key names will survive. The values do not have to be quoted if there are no spaces in the value. If there are any, single and double quote characters (' and ") can be used.</p></li></ul></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm139922183566832"></a>3.1.1. Comment</h4></div></div></div><p>Comments are possible on several places and starts with '#'. To be more exact, all space before '\#', the character '\#' and characters after it up to the end of line including the end of line characters are removed.</p></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm139922183565952"></a>3.1.2. Escaping characters</h4></div></div></div><p>When you want to use a character which is used as a delimiter ('[') or start of an element ('$') you must escape that character to prevent the action that takes place when encountering that character. Writing '\\' before that character escapes them from that interpretation. Examples are '\\\[' or '\\\$'.</p></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm139922183564992"></a>3.1.3. Unicode characters</h4></div></div></div><p>All available Unicode characters from the utf-8 set may be used in the text. These can be inserted directly by cut and paste, using special keyboards, compose keys, entity codes such symbol © as &amp;copy;, or using numeric codes symbol &amp; &amp;#9986; or &amp;\#x2702;. The entity code must be known by the specific XML code using e.g. the DTD of the language.</p></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm139922183563248"></a>3.1.4. Container types</h4></div></div></div><p>There are several ways to contain the text between delimiters depending on the contents or even the absence of content. Take, for example the HTML break element &lt;br/&gt;. This element does not have content. We could write this as<span class="emphasis"><em> $br []</em></span>. But we can leave off the brackets to make it shorter like so;<span class="emphasis"><em> $br</em></span>. There are however situations where you must use the brackets when the following text is in a argument=value format to prevent them to be interpreted as such. E.g.<span class="emphasis"><em> $br [] after=break</em></span>.</p><p>As described above under<span class="emphasis"><em> Escaping characters </em></span>it is possible to insert characters which are otherwise interpreted as something special. However, it gets annoying when there are many of them like in a piece of JavaScript or Perl code. There is a solution for that luckily, just enclose the text between '{' and '}'. Nothing gets interpreted between these delimiters as well as comments are kept in the text. That works for simple code and is easier to type. But these brackets can be used a lot in code so there is another possibility. Use '«' and '»' for that. Not many program languages beside perl6 use these characters. It might come in handy to program a compose key for this, otherwise it becomes a pain to insert those characters.</p><p>In html the text is justified automatically except in certain sections such as within &lt;pre&gt; elements. Sxml does not have any notion of these sections and treat those as xml and all excess of space is removed. To cope with these sections another set of container delimiters are used. These are<span class="emphasis"><em> [ ... ]</em></span>. With these brackets, all indenting and newlines are fixed and protected.</p><p>Multiple content bodies are also possible when there are parts which need protection and in other parts, elements are needed. E.g.<span class="emphasis"><em> $p [The line; ]« my Int $x = 10; »[ is an $b[Int] declaration] </em></span></p></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm139922183557200"></a>3.1.5. Element types</h4></div></div></div><p>Some examples of elements are already shown at the start of this chapter like<span class="emphasis"><em> $html </em></span>for instance. It is written as a name with a dollar prefixed to it. Normally, spacing around an element is minimized but at some places there must be a space before or after the element. Examples from html are &lt;a&gt;, &lt;b&gt; and &lt;strong&gt; among other inline elements. ... F Table config .... to have a space on both sides, on the left side or on the right side respectively.</p><p>Another type is a special one. It is defined as<span class="emphasis"><em> $!module-key.method-name </em></span>where the module-key is mapped to a real module in the configuration file. One key is predefined: SxmlCore and is mapped to SxmlLib::SxmlCore. The methods defined in that module are explained in a separate chapter. How a module is initialized and called for its services is also enaugh stuff to have an extra chapter.</p></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm139922183554768"></a>3.1.6. Attribute types</h4></div></div></div><p></p></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm139922183554256"></a>3.1.7. Core element methods</h4></div></div></div><p></p></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183553744"></a>3.2. Configuration</h3></div></div></div><p>The configuration is defined in a separate file which is in the TOML format. The data from the configuration is used to e.g. control the output of the result. Other usages are referencing libraries to be used while parsing the document and to specify te dependncy list. The information is specified in a number of tables. Each of these tables are used in one specific phase of the whole process. The phases in this transformation process and the used tables are;</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><span class="emphasis"><em> Pre transformation phase</em></span>. In this phase dependencies, if any, can be checked and solved before transformation starts. The<span class="emphasis"><em> X </em></span>table is used to find the dependencies.</p></li><li class="listitem"><p><span class="emphasis"><em> Transformation phase</em></span>. This is the phase where parsing and transformation of the document takes place. The tables used here are the libraries table<span class="emphasis"><em> L </em></span>and modules<span class="emphasis"><em> M </em></span>table to initialize objects needed in this proces.</p></li><li class="listitem"><p><span class="emphasis"><em> Post transformation phase</em></span>. When the document is translated, the result can be prefixed with extra data. The table used for this is the prefix table<span class="emphasis"><em> P</em></span>. When the result is generated on a server and needs to be returned, extra data must be prefixed. These are the so called message headers of which that of the http protocol are the most commonly used headers. The table<span class="emphasis"><em> H </em></span>is used for this.</p></li><li class="listitem"><p><span class="emphasis"><em> Storage phase</em></span>. The next phase is storing the data in a file. For this the staorage table<span class="emphasis"><em> S </em></span>is used where the files basename, path and extension is found.</p></li><li class="listitem"><p><span class="emphasis"><em> </em></span>.</p></li></ul></div><p>The prelude consists of a series of key-value pairs. The keys are defined as a series of catagories and subcatagories. The value can be anything. The key value pair is separated by a colon ':' and the pair ends in a ';'. The prelude part is also optional. In that case defaults will be applied.</p><p>Below you see an example of two options to let the xml prelude be written as well as a doctype at the start of the result.</p><pre class="programlisting">
        </pre><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm139922183545056"></a>3.2.1. Options used by the library SemiXML</h4></div></div></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183600480"></a>module</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183544064"></a>option/doctype/definition</h5></div></div></div><pre class="programlisting">
option/doctype/definition: [
  &lt;!ENTITY company "Acme Mc Carpenter, Inc"&gt;
  &lt;!ENTITY program "sxml2xml"&gt;
  &lt;!ENTITY library "Semi-xml"&gt;
  &lt;!ENTITY nbsp " "&gt;
]
            </pre></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183543024"></a>option/doctype/show</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183542512"></a>option/http-header</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183542000"></a>option/xml-prelude/encoding</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183541440"></a>option/xml-prelude/show</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183540928"></a>option/xml-prelude/version</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183540368"></a>output/fileext</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183539856"></a>output/filename</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183539344"></a>output/filepath</h5></div></div></div><p></p></div><div class="sect4"><div class="titlepage"><div><div><h5 class="title"><a id="idm139922183538832"></a>output/program</h5></div></div></div><pre class="programlisting">
output/program/pdf:
  | xsltproc --encoding utf-8 --xinclude stylesheet.xsl -
  | xep -fo - -pdf sxml2xml.pdf
  ;
            </pre></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Prog-view"></a>4. The programmers view</h2></div></div></div><p></p><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183537216"></a>4.1. Classes data and methods</h3></div></div></div><p></p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183536656"></a>4.2. Substitution data</h3></div></div></div><p></p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183536144"></a>4.3. Methods</h3></div></div></div><p></p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Use-prog"></a>5. Using program sxml2xml</h2></div></div></div><p></p><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183534928"></a>5.1. Program arguments</h3></div></div></div><pre class="synopsis">sxml2xml [--run=&lt;run-selector&gt;] &lt;sxml-file&gt;</pre></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183534048"></a>5.2. Prelude options</h3></div></div></div><div class="sect3"><div class="titlepage"><div><div><h4 class="title"><a id="idm139922183533664"></a>5.2.1. dependencies/files</h4></div></div></div><p>The value of this option is a list of paths to semi-xml documents which must be processed after the current one.</p></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title"><a id="idm139922183532896"></a>5.3. Unix she-bang usage</h3></div></div></div><p></p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="syntax"></a>6. Syntax</h2></div></div></div><pre class="programlisting">
&lt;sxml-syntax&gt; ::= &lt;prelude-section&gt;? &lt;document&gt;;

&lt;prelude-section&gt; ::= '---' &lt;new-line&gt; &lt;key-value-pairs&gt;* '---' &lt;new-line&gt;;
&lt;key-value-pairs&gt; ::= &lt;key-name&gt; ':' &lt;value&gt; ';';
&lt;key-name&gt; ::= &lt;key-part&gt; ('/' &lt;key-part&gt;)*;
&lt;key-part&gt; ::= &lt;letter&gt; (&lt;letter&gt;|&lt;number&gt;)*;

&lt;document&gt; ::= &lt;prefix&gt; &lt;element&gt; ( &lt;attribute&gt; '=' &lt;attr-value&gt; )*
               '[' &lt;body-start-control&gt; &lt;body&gt; &lt;body-end-control&gt;
               ']';

&lt;prefix&gt; ::= '$.' | '$';

&lt;element&gt; ::= &lt;identifier&gt;;
&lt;attribute&gt; ::= &lt;identifier&gt;;
&lt;attr-value&gt; ::= '"' &lt;ws-text&gt; '"' | "'" &lt;ws-text&gt; "'"
                 | &lt;non-ws-text&gt;;

&lt;identifier&gt; ::=  &lt;letter&gt; (&lt;letter&gt;|&lt;number&gt;)*
                  ( '-' (&lt;letter&gt; (&lt;letter&gt;|&lt;number&gt;)+) )*;

&lt;body-start-control&gt; ::= '!=' | '\!' | '=';
&lt;body-end-control&gt; ::= '\!';
      </pre></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Examples"></a>7. Examples</h2></div></div></div><p></p></div><div class="index"><div class="titlepage"><div><div><h2 class="title"><a id="idm139922183529696"></a>Index</h2></div></div></div><div xmlns:xlink="http://www.w3.org/1999/xlink" class="index"></div></div></div></body></html>