$!report.run title='Integer manipulations' class='Int' label='Int-test'
             highlight-lang='lang-perl6' highlight-skin='doxy' linenumbers=1
             test-file='doc/Examples/Documenting tests/test1.t' [

  $|h1 [The Perl 6 integer test report]

  $|p [
    The integer is in perl the most important type so we need to do our best
    to test it thoroughly. First we declare a constant to be used later and an
    integer without a value.
  ]
  
  $!code.add [=
    constant ABC = 10;
    my Int $i;
    my Hash $h;
    $h<test> = $i;

    $!test.add t="nok $i.defined" [
      Declaration of an integer without an assignment of a value,
      should result in an undefinedness.
    ]

    $!test.add t="ok $i ~~ Int" [
      But when defined or not, its type value can be compared.
    ]

    $!todo.add n=1 [
      Someday we might make this not fail when wormwhole modules are installed
    ]

    $!test.add t="ok $i !~~ Int" [The opposite test should fail]
    $!test.add t="ok $i ~~ Cool" [
      Also inherited classes should be compared
      successfully.
    ]
  ]

  $|h3 [Operations]

  $|p [Next a few tests to see if operations can be applied to the integer]

  $!code.add [=
    $i = ABC;

    $!test.add t="is $i, 10" [
      Initialize Int with the constant seems to have done well
    ]


    if ?"We are not stupid" {

      $!skip.add n=2 [ Two lines are skipped because these are stupid tests ]

    } else {

      $!test.add t='ok 10 < 7' [10 not smaller than 7]
      $!test.add t='ok 11 / 0' [Won't work in this universe]
      $!code.add append=1 [!=}!]
    }

    $!todo.add n=2 [
      Incredible tests which will be true in the not so distant future
    ]
    $!test.add t="is $i, 11" [Integer is 10 not 11]
    $!test.add t="like $i.Str, /'not 10, but text'/" [test some text]

    for ^10 {
      $!test.add t='  ok $^a < 7' [test a series of numbers against 7]
    }

    for ^11 {

      $!todo.add n=11 tl=1 [Should make todos with this test]
      $!test.add t='  ok $^a > 8' [test a series of numbers against 8]

    }

    my Int $i2 = 20304;

    $!bug.add n=2 [ Mentioned a few bugs from the issues list on github ]
    $!test.add t='is $i2, 20304' [ ok, for now ]
    $!test.add t='is $i2 - 20305, 1' [ not ok ]
  ]
]
