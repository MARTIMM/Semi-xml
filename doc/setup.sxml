#!/home/marcel/Languages/Perl6/Projects/Semi-xml/bin/sxml2xml.pl6
#
---
option/xml-prelude/show:       1;
option/doctype/show:           1;
option/doctype/definition: [
        <!ENTITY company "Acme Mc Carpenter, Inc">
        <!ENTITY program "sxml2xml">
        <!ENTITY library "Semi-xml">
        <!ENTITY nbsp " ">
#        <!ENTITY % isoamsa SYSTEM "/home/marcel/Languages/Perl/Lib/Modules/Data2any-Xml/Entities/isoamsa.ent">
#        %isoamsa\;
#        <!ENTITY % isopub SYSTEM "/home/marcel/Languages/Perl/Lib/Modules/Data2any-Xml/Entities/isopub.ent">
#        #%isopub\;
];

output/filepath:                .;

output/program/xml:
        | xmllint --format - > sxml2xml.xml;
output/program/chk:
        | tee sxml2xml.xml | xmllint --format -
        | rnv /usr/share/xml/docbook5/schema/rng/5.0/docbook.rnc
        ;
output/program/pdf:
        | xsltproc --encoding utf-8 --xinclude stylesheet.xsl -
        | xep -fo - -pdf sxml2xml.pdf
        ;

#module/File:                    SxmlLib::File;
module/Db5b:                    SxmlLib::Docbook5::Basic;
---
$.Db5b.article [
  $title [ Using Semi-xml ]
  $!Db5b.info firstname=Marcel surname=Timmerman email=mt1957@gmail.com
              city=Haarlem country=Netherlands
              copy-year='2015, 2016 ... Inf' copy-holder='Marcel Timmerman' [
    $para [
      The library &library; provides methods to parse a text and generate
      any XML language be it html, soap or xsl.
    ]

    $para [
      The program &program; uses this library to transform text from a file
      into xml after which it is possible to store it in a file
      or send it to any program for conversion to other types or for checking. 
      examples are xsltproc, xmllint, rnv, wkhtmltopdf and xep.
    ]

    $para [
      The latest version of this document is generated on date
      $!SxmlCore.date []
    ]
  ]

#  $!File.include type=include reference=preface.sxml []
  $sect1 [
    $title [ Introduction of &library; ]
    $para [
      Welcome to\ $emphasis[&library;]. &library; is a Perl 6 module to convert
      a semi xml text into\ $emphasis[XML]. This article will explain the
      language this module can parse.
    ]

    $para [
      The language exists of a prelude and the document. The prelude is
      used to introduce external modules and to define ways to output the 
      resulting xml.
    ]
  ]

  $sect1 [
    $title [the language]
    $para [
      As been said, the semi xml language consists of two parts. A prelude and a
      document. The prelude starts with 3 dashes and ends with it. The prelude
      itself consists of a series of key-value pairs. The keys are defined as a
      series of catagories and subcatagories looking much like a filepath. The
      value can be anything. The key value pair is separated by a colon ':' and
      the pair ends in a ';'. The prelude part is also optional. In that case
      defaults will be applied.
    ]
    $para [
      The document follows the prelude and is the thing you want to publish. It
      has a similar look as xml (in this case its html) but is easier to read.
    ]

    $para [
      Below you see a simple layout example.
      $programlisting [=
        ---
        option/doctype/show: 1;         $co xml:id=co.ex01.prelude [x]
        ---
        \$html [                         $co xml:id=co.ex01.document [x]
          \$head [
            \$title [Hello World\]
          \]
          \$body [
            \$h1 [My first header\]
            \$p [
              And another greeting
            \]
          \]
        \]
      ]

      $calloutlist [
        $callout arearefs=co.ex01.prelude [
          $para [
            The prelude has only one entry. Here we want a doctype before the
            result.
          ]
        ]

        $callout arearefs=co.ex01.document [
          $para [
            The document will result in a html document. It clearly shows
            <html>, <head> and <body> elements.
          ]
        ]
      ]

      The result will be after running through a XML formatter.
      $programlisting [=
        <!DOCTYPE html>
        <html>
          <head>
            <title>Hello World</title>
          </head>
          <body>
            <h1>My first header</h1>
            <p>And another greeting</p>
          </body>
        </html>
      ]
    ]

    $sect2 [
      $title [Prelude]
      $para [
        Below you see an example of two options to let the xml prelude be
        written at the start of the result as well as a doctype.
        $programlisting [!=
          ---
          option/xml-prelude/show:    1;
          option/doctype/show:    1;
          ---
        !]
      ]
    ]

    $sect2 [
      $title [Document]
      $para [

      ]

      $sect3 [
        $title [Tag types]
        $para [

        ]
      ]
    ]
  ]

  $sect1 [
    $title [ Using &library; ]
    $para [

    ]
  ]

  $sect1 [
    $title [ Creating methods to be used as a tag ]
    $para [

    ]
  ]

  $sect1 [
    $title [ Using &program; ]
    $para [

    ]
  ]

  $sect1 [
    $title [ Examples ]
    $para [

    ]
  ]

  $sect1 [
    $title [ Information ]
    $para [

    ]
  ]

  $index []
]
